buildscript {
    ext {
        kotlinVersion = '1.3.0'
        springBootVersion = '2.1.0.RELEASE'
        dokka_version = '0.9.15'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        //dokka
        //classpath("org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}")
        //docker
        classpath("com.palantir.gradle.docker:gradle-docker:0.19.2")
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.palantir.docker'

group = 'cfig.p2psniper'
version = '1.0'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions.freeCompilerArgs = ["-Xjsr305=strict"]
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.freeCompilerArgs = ["-Xjsr305=strict"]
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    //mavenCentral()
    maven { url 'https://repo.spring.io/libs-milestone' }
}

sourceSets {
    main {
        java {
            srcDirs '../mina_common/src/main/java'
            srcDirs '../db/src/main/java'
        }
        kotlin {
            srcDirs '../mina_common/src/main/kotlin'
            srcDirs '../db/src/main/kotlin'
            srcDirs 'src/main/kotlin'
        }
    }
}

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    //sub-project
    compile project(':ppdsdk')

    //mariadb
    compile("org.mariadb.jdbc:mariadb-java-client")

    compile("com.squareup.okhttp3:okhttp:3.10.0")
    //data
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.data:spring-data-commons")
    compile("org.hibernate:hibernate-core")
    compile("org.hibernate.validator:hibernate-validator")

    testCompile('org.springframework.boot:spring-boot-starter-test')

    //web starter
	compile('org.springframework.boot:spring-boot-starter-web')
    //compile("org.springframework.boot:spring-boot-starter-actuator")

    //mina
    compile("org.apache.mina:mina-core:2.0.16")

    //cloud
    compile('org.springframework.cloud:spring-cloud-starter-config')

    //rabbitmq
    compile("com.rabbitmq:amqp-client:5.4.1")
    //redis
    compile("redis.clients:jedis:2.9.0")

    //for hibernate on java 9+
    compile("javax.xml.bind:jaxb-api:2.3.0")
    compile("com.sun.xml.bind:jaxb-impl:2.3.0")
    compile("com.sun.xml.bind:jaxb-core:2.3.0")
    compile("javax.activation:activation:1.1.1")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    testLogging {
        showStandardStreams = true
    }
}

/*
dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}
*/

docker {
    //name "${project.group}/${jar.baseName}"
    name "cfig/sniper"
    files jar.archivePath, "../tools/rj"
    buildArgs(['JAR_FILE': "${jar.archiveName}", 'TOOL_DIR': "some/dir/path"])
}

ext {
    def revision = 'git rev-list --max-count 1 --timestamp HEAD'.execute().text.trim()
    commitHash = revision.split(' ').last()
    timestamp = revision ? new java.util.Date(java.util.concurrent.TimeUnit.SECONDS.toMillis(revision.split(' ').first() as long)).format("yyyy-MM-dd' 'HH:mm:ss Z") : null
}

def x1Internal() {
    def revision = 'git rev-list --max-count 1 --timestamp HEAD'.execute().text.trim()
    def commitHash = revision.split(' ').last()
    def timestamp = revision ? new java.util.Date(java.util.concurrent.TimeUnit.SECONDS.toMillis(revision.split(' ').first() as long)).format("yyyy-MM-dd' 'HH:mm:ss Z") : null
    println("__________________");
    println(commitHash);
    println(timestamp);
    println("__________________");
}

task x1 {
    doLast {
        x1Internal()
        println(projectDir)
    }
}

task ee(type:Exec) {
  workingDir "."
  commandLine "date"
  standardOutput = new ByteArrayOutputStream()
  ext.output = {
    return standardOutput.toString()
  }
  doLast {
      println(standardOutput.toString())
  }
}

springBoot {
    buildInfo {
        properties {
            additional = [
                type: releaseType,
                commitHash: commitHash,
                commitTime: timestamp
            ]
        }
    }
}
